{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPNwd3BiAZROMnWAoiTgAVy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":65,"metadata":{"id":"hOH_2-_fE3rz","executionInfo":{"status":"ok","timestamp":1747258039560,"user_tz":180,"elapsed":38,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"outputs":[],"source":["import pandas as pd"]},{"cell_type":"markdown","source":["### Exemplos"],"metadata":{"id":"sQufH9hGFNa2"}},{"cell_type":"code","source":["gols_pro = {\"Flamengo\":17,\n","            \"Fluminense\":10,\n","            \"Vasco\":7,\n","            \"Botafogo\":10,\n","            \"Palmeiras\":9,\n","            \"Corinthians\":11,\n","            \"São Paulo\":6,\n","            \"Santos\":7}"],"metadata":{"id":"Ei1ECpqkFMvq","executionInfo":{"status":"ok","timestamp":1747258068316,"user_tz":180,"elapsed":14,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"execution_count":66,"outputs":[]},{"cell_type":"code","source":["gols_contra = {\"Flamengo\":4,\n","            \"Fluminense\":10,\n","            \"Vasco\":11,\n","            \"Botafogo\":5,\n","            \"Palmeiras\":3,\n","            \"Corinthians\":14,\n","            \"São Paulo\":6,\n","            \"Santos\":10}"],"metadata":{"id":"RfCpNQBkLCsP","executionInfo":{"status":"ok","timestamp":1747258070808,"user_tz":180,"elapsed":10,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"execution_count":67,"outputs":[]},{"cell_type":"code","source":["series_pro = pd.Series(gols_pro)\n","series_contra = pd.Series(gols_contra)"],"metadata":{"id":"aSd9NA9lFaIc","executionInfo":{"status":"ok","timestamp":1747258083715,"user_tz":180,"elapsed":3,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"execution_count":68,"outputs":[]},{"cell_type":"code","source":["serie_saldo_gols = series_pro - series_contra"],"metadata":{"id":"jd2se-uNso-1","executionInfo":{"status":"ok","timestamp":1747258190603,"user_tz":180,"elapsed":9,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["serie_saldo_positivo = series_pro > series_contra"],"metadata":{"id":"whev3PfPtDJc","executionInfo":{"status":"ok","timestamp":1747258503794,"user_tz":180,"elapsed":11,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["serie_maior_que_10_gols = series_pro>=10"],"metadata":{"id":"NKvLa5x_uP8U","executionInfo":{"status":"ok","timestamp":1747258803276,"user_tz":180,"elapsed":8,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"execution_count":87,"outputs":[]},{"cell_type":"code","source":["mais_20_gols = series_pro>=20"],"metadata":{"id":"VYHGnd1nynfO","executionInfo":{"status":"ok","timestamp":1747259676218,"user_tz":180,"elapsed":10,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"execution_count":114,"outputs":[]},{"cell_type":"code","source":["mais_20_gols[mais_20_gols==True]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":84},"id":"aXH2FeqGytyu","executionInfo":{"status":"ok","timestamp":1747259682952,"user_tz":180,"elapsed":19,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}},"outputId":"452518d9-b3e6-4013-cd99-b59e5840473c"},"execution_count":115,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Series([], dtype: bool)"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> bool</label>"]},"metadata":{},"execution_count":115}]},{"cell_type":"code","source":["type(series_pro+1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":203},"id":"l_uqg_jc006p","executionInfo":{"status":"ok","timestamp":1747260241588,"user_tz":180,"elapsed":112,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}},"outputId":"26799968-7656-4f56-9049-39ac84767239"},"execution_count":116,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pandas.core.series.Series"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.series.Series</b><br/>def __init__(data=None, index=None, dtype: Dtype | None=None, name=None, copy: bool | None=None, fastpath: bool | lib.NoDefault=lib.no_default) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.11/dist-packages/pandas/core/series.py</a>One-dimensional ndarray with axis labels (including time series).\n","\n","Labels need not be unique but must be a hashable type. The object\n","supports both integer- and label-based indexing and provides a host of\n","methods for performing operations involving the index. Statistical\n","methods from ndarray have been overridden to automatically exclude\n","missing data (currently represented as NaN).\n","\n","Operations between Series (+, -, /, \\*, \\*\\*) align values based on their\n","associated index values-- they need not be the same length. The result\n","index will be the sorted union of the two indexes.\n","\n","Parameters\n","----------\n","data : array-like, Iterable, dict, or scalar value\n","    Contains data stored in Series. If data is a dict, argument order is\n","    maintained.\n","index : array-like or Index (1d)\n","    Values must be hashable and have the same length as `data`.\n","    Non-unique index values are allowed. Will default to\n","    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n","    and index is None, then the keys in the data are used as the index. If the\n","    index is not None, the resulting Series is reindexed with the index values.\n","dtype : str, numpy.dtype, or ExtensionDtype, optional\n","    Data type for the output Series. If not specified, this will be\n","    inferred from `data`.\n","    See the :ref:`user guide &lt;basics.dtypes&gt;` for more usages.\n","name : Hashable, default None\n","    The name to give to the Series.\n","copy : bool, default False\n","    Copy input data. Only affects Series or 1d ndarray input. See examples.\n","\n","Notes\n","-----\n","Please reference the :ref:`User Guide &lt;basics.series&gt;` for more information.\n","\n","Examples\n","--------\n","Constructing Series from a dictionary with an Index specified\n","\n","&gt;&gt;&gt; d = {&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3}\n","&gt;&gt;&gt; ser = pd.Series(data=d, index=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n","&gt;&gt;&gt; ser\n","a   1\n","b   2\n","c   3\n","dtype: int64\n","\n","The keys of the dictionary match with the Index values, hence the Index\n","values have no effect.\n","\n","&gt;&gt;&gt; d = {&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3}\n","&gt;&gt;&gt; ser = pd.Series(data=d, index=[&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;])\n","&gt;&gt;&gt; ser\n","x   NaN\n","y   NaN\n","z   NaN\n","dtype: float64\n","\n","Note that the Index is first build with the keys from the dictionary.\n","After this the Series is reindexed with the given Index values, hence we\n","get all NaN as a result.\n","\n","Constructing Series from a list with `copy=False`.\n","\n","&gt;&gt;&gt; r = [1, 2]\n","&gt;&gt;&gt; ser = pd.Series(r, copy=False)\n","&gt;&gt;&gt; ser.iloc[0] = 999\n","&gt;&gt;&gt; r\n","[1, 2]\n","&gt;&gt;&gt; ser\n","0    999\n","1      2\n","dtype: int64\n","\n","Due to input data type the Series has a `copy` of\n","the original data even though `copy=False`, so\n","the data is unchanged.\n","\n","Constructing Series from a 1d ndarray with `copy=False`.\n","\n","&gt;&gt;&gt; r = np.array([1, 2])\n","&gt;&gt;&gt; ser = pd.Series(r, copy=False)\n","&gt;&gt;&gt; ser.iloc[0] = 999\n","&gt;&gt;&gt; r\n","array([999,   2])\n","&gt;&gt;&gt; ser\n","0    999\n","1      2\n","dtype: int64\n","\n","Due to input data type the Series has a `view` on\n","the original data, so\n","the data is changed as well.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 263);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":116}]},{"cell_type":"code","source":["serie_resultado = (series_pro>=10) & (series_pro > series_contra)"],"metadata":{"id":"91aAGEABnLSR","executionInfo":{"status":"ok","timestamp":1747258969702,"user_tz":180,"elapsed":13,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"execution_count":92,"outputs":[]},{"cell_type":"code","source":["serie_resultado"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"lTqhiqAzwuN4","executionInfo":{"status":"ok","timestamp":1747259156943,"user_tz":180,"elapsed":27,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}},"outputId":"3e95903f-7aec-4a4e-d8a6-74cf45f5a6f8"},"execution_count":99,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Flamengo        True\n","Fluminense     False\n","Vasco          False\n","Botafogo        True\n","Palmeiras      False\n","Corinthians    False\n","São Paulo      False\n","Santos         False\n","dtype: bool"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Flamengo</th>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>Fluminense</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Vasco</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Botafogo</th>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>Palmeiras</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Corinthians</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>São Paulo</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Santos</th>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> bool</label>"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["resultado = serie_resultado[serie_resultado == True].index.to_list()"],"metadata":{"id":"0Mne4IgPwpRY","executionInfo":{"status":"ok","timestamp":1747259591063,"user_tz":180,"elapsed":6,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}}},"execution_count":109,"outputs":[]},{"cell_type":"code","source":["resultado"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bSUG6r5MyZJ3","executionInfo":{"status":"ok","timestamp":1747259594726,"user_tz":180,"elapsed":14,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}},"outputId":"2e6c109f-c6c2-4c31-8efc-8e7de741e3f7"},"execution_count":110,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Flamengo', 'Botafogo']"]},"metadata":{},"execution_count":110}]},{"cell_type":"code","source":["resultado = 0\n","\n","for idx, valor in serie_resultado.items():\n","  if valor == True:\n","    resultado += 1\n","\n","print(resultado)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1aysJffPwBXf","executionInfo":{"status":"ok","timestamp":1747259117126,"user_tz":180,"elapsed":14,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}},"outputId":"b7bd6c86-7020-4082-ac4a-eec5189fa290"},"execution_count":97,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n"]}]},{"cell_type":"code","source":["series_pro.keys().to_list()"],"metadata":{"id":"NJo53JtGlNq5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Old"],"metadata":{"id":"axrBVfy1jrjQ"}},{"cell_type":"code","source":["mais_10_gols_pro = (series_pro > 10)\n","\n","display(mais_10_gols_pro)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"YkXcMMKDLr9y","executionInfo":{"status":"ok","timestamp":1747249638597,"user_tz":180,"elapsed":23,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}},"outputId":"504a48fe-a7e4-42a0-c9b6-ad83eb0b1f43"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Flamengo        True\n","Fluminense     False\n","Vasco          False\n","Botafogo       False\n","Palmeiras      False\n","Corinthians     True\n","São Paulo      False\n","Santos         False\n","dtype: bool"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Flamengo</th>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>Fluminense</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Vasco</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Botafogo</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Palmeiras</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Corinthians</th>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>São Paulo</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Santos</th>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> bool</label>"]},"metadata":{}}]},{"cell_type":"code","source":["menos_10_gols_contra = (series_contra < 10)\n","\n","display(menos_10_gols_contra)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"qDf0QLSCMJhB","executionInfo":{"status":"ok","timestamp":1747249640928,"user_tz":180,"elapsed":23,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}},"outputId":"3954e9c5-1e4f-4677-a601-6c6b8396a6e4"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Flamengo        True\n","Fluminense     False\n","Vasco          False\n","Botafogo        True\n","Palmeiras       True\n","Corinthians    False\n","São Paulo       True\n","Santos         False\n","dtype: bool"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Flamengo</th>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>Fluminense</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Vasco</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>Botafogo</th>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>Palmeiras</th>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>Corinthians</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>São Paulo</th>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>Santos</th>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> bool</label>"]},"metadata":{}}]},{"cell_type":"code","source":["resultado = mais_10_gols_pro & menos_10_gols_contra"],"metadata":{"id":"VCuAyPPrMdb1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["resultado[resultado].index"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cBPAMn_IN_W3","executionInfo":{"status":"ok","timestamp":1747250127787,"user_tz":180,"elapsed":17,"user":{"displayName":"Guilherme Schmitt","userId":"10547420618233157765"}},"outputId":"bd1fdf96-4dd3-4a80-e85b-aac9a3b27ab7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Flamengo'], dtype='object')"]},"metadata":{},"execution_count":35}]}]}